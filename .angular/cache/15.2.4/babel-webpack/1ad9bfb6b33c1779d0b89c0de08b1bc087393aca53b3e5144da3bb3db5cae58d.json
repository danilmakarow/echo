{"ast":null,"code":"import { BehaviorSubject, filter, from, map, switchMap, tap } from \"rxjs\";\nimport { arrayUnion, updateDoc } from \"@angular/fire/firestore\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../../user-data.service\";\nimport * as i2 from \"../../../dialog-transfer.service\";\nimport * as i3 from \"@angular/fire/compat/firestore\";\nexport class ChatDataService {\n  onSendMessage(messageEl) {\n    const message = messageEl.value.trim();\n    if (!message) return;\n    messageEl.value = '';\n    this.messageHeightCalc(messageEl);\n    this.sendMessageToDB(this.chatData$.getValue()?.ref, this.createMessageForDB(messageEl, message));\n  }\n  messageHeightCalc(textarea) {\n    textarea.style.height = 'auto'; // Сброс высоты перед вычислением новой высоты\n    textarea.style.height = textarea.scrollHeight - 22 + 'px'; // Установка новой высоты на основе высоты содержимого\n  }\n\n  createMessageForDB(messageEl, message, user = this.userData.curUserDoc?.ref) {\n    return {\n      content: message,\n      senderId: user,\n      time: new Date().toISOString()\n    };\n  }\n  getMessagesData(dialog) {\n    from(dialog.ref.get()).subscribe(chat => this.setNewUserAndMessages(dialog.otherUserName, dialog.otherUserPhoto, dialog.ref, chat.data()?.message));\n    return this.store.doc(`chats/${dialog.ref.id}`).snapshotChanges();\n  }\n  setNewUserAndMessages(name, photo, ref, messages) {\n    this.chatData$.next({\n      name,\n      photo,\n      ref\n    });\n    this.messagesData$.next(messages);\n  }\n  randomBoolean() {\n    return Math.random() < 0.4;\n  }\n  onTestChat(test) {\n    const random = this.randomBoolean();\n    if (test.payload.data()?.message.slice(-1)[0].senderId.id === 'test--main' && random) {\n      const currentChat = this.chatData$.getValue()?.ref;\n      const senderId = this.store.doc(`users/H89Non7WmWztp02NPxMO`).ref;\n      const messages = ['Hello👋! This message was sent automatically for you to see the application in action.', \"It is sends with a 40% probability. You're lucky if you see it. Have a nice day🎉\"];\n      //Отправка тестовых сообщений\n      setTimeout(() => this.sendMessageToDB(currentChat, this.createMessageForDB(null, messages[0], senderId)), 500);\n      setTimeout(() => this.sendMessageToDB(currentChat, this.createMessageForDB(null, messages[1], senderId)), 800);\n    }\n  }\n  sendMessageToDB(chat, message) {\n    updateDoc(chat, {\n      message: arrayUnion(message)\n    });\n  }\n  constructor(userData, dialogTrans, store) {\n    this.userData = userData;\n    this.dialogTrans = dialogTrans;\n    this.store = store;\n    this.chatData$ = new BehaviorSubject(null);\n    this.messagesData$ = new BehaviorSubject(null);\n    // Подписка на изменение выбранного диалога\n    dialogTrans.dialog$.pipe(filter(Boolean), switchMap(dialog => this.getMessagesData(dialog)), filter(data => data.payload.data()?.message.length > this.messagesData$.getValue()?.length), filter(dialog => dialog.type === 'modified'), tap(data => data.payload.id === 'test-chat' ? this.onTestChat(data) : null), map(data => data.payload.data()?.message)).subscribe(messages => this.messagesData$.next(messages));\n  }\n}\nChatDataService.ɵfac = function ChatDataService_Factory(t) {\n  return new (t || ChatDataService)(i0.ɵɵinject(i1.UserDataService), i0.ɵɵinject(i2.DialogTransferService), i0.ɵɵinject(i3.AngularFirestore));\n};\nChatDataService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ChatDataService,\n  factory: ChatDataService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["BehaviorSubject","filter","from","map","switchMap","tap","arrayUnion","updateDoc","ChatDataService","onSendMessage","messageEl","message","value","trim","messageHeightCalc","sendMessageToDB","chatData$","getValue","ref","createMessageForDB","textarea","style","height","scrollHeight","user","userData","curUserDoc","content","senderId","time","Date","toISOString","getMessagesData","dialog","get","subscribe","chat","setNewUserAndMessages","otherUserName","otherUserPhoto","data","store","doc","id","snapshotChanges","name","photo","messages","next","messagesData$","randomBoolean","Math","random","onTestChat","test","payload","slice","currentChat","setTimeout","constructor","dialogTrans","dialog$","pipe","Boolean","length","type","factory","providedIn"],"sourceRoot":"","sources":["C:\\Courses\\ANGULAR\\echo\\src\\app\\feature\\messenger\\messenger\\chat\\chat-data.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {DialogTransferService} from \"../../../dialog-transfer.service\";\nimport {BehaviorSubject, filter, from, map, Observable, of, switchMap, tap} from \"rxjs\";\nimport {message, UserDialog, chat, UserDataService} from \"../../../user-data.service\";\nimport {Action, AngularFirestore, DocumentReference, DocumentSnapshot} from \"@angular/fire/compat/firestore\";\nimport {arrayUnion, updateDoc} from \"@angular/fire/firestore\";\n\nexport interface ChatData {\n  name: string,\n  photo: string,\n  ref: DocumentReference<chat>\n}\n\nexport interface messageDB {\n  content: string,\n  senderId: DocumentReference,\n  time: string\n}\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class ChatDataService {\n  chatData$ = new BehaviorSubject<ChatData | null>(null);\n  messagesData$ = new BehaviorSubject<message[] | null>(null);\n\n  onSendMessage(messageEl: HTMLTextAreaElement): void {\n    const message = messageEl.value.trim();\n    if (!message) return;\n\n    messageEl.value = '';\n    this.messageHeightCalc(messageEl);\n\n    this.sendMessageToDB(\n      this.chatData$.getValue()?.ref as DocumentReference<chat>,\n      this.createMessageForDB(messageEl, message)\n    )\n  }\n\n  messageHeightCalc(textarea: HTMLTextAreaElement): void {\n    textarea.style.height = 'auto'; // Сброс высоты перед вычислением новой высоты\n    textarea.style.height = textarea.scrollHeight - 22 + 'px'; // Установка новой высоты на основе высоты содержимого\n  }\n\n  createMessageForDB(messageEl: HTMLTextAreaElement | null, message: string, user: DocumentReference = this.userData.curUserDoc?.ref): messageDB {\n    return {\n      content: message,\n      senderId: user,\n      time: new Date().toISOString()\n    }\n  }\n\n  getMessagesData(dialog: UserDialog) {\n    from(dialog.ref.get()).subscribe(chat =>\n      this.setNewUserAndMessages(dialog.otherUserName, dialog.otherUserPhoto, dialog.ref, chat.data()?.message as message[])\n    )\n    return this.store.doc<chat>(`chats/${dialog.ref.id}`).snapshotChanges()\n  }\n\n  setNewUserAndMessages(name: string, photo: string, ref: DocumentReference<chat>, messages: message[]): void {\n    this.chatData$.next({name, photo, ref})\n    this.messagesData$.next(messages)\n  }\n\n  randomBoolean(): boolean {\n    return Math.random() < 0.4;\n  }\n\n  onTestChat(test: Action<DocumentSnapshot<chat>>){\n    const random = this.randomBoolean()\n    if(test.payload.data()?.message.slice(-1)[0].senderId.id === 'test--main' && random) {\n      const currentChat = this.chatData$.getValue()?.ref as DocumentReference<chat>;\n      const senderId = this.store.doc<chat>(`users/H89Non7WmWztp02NPxMO`).ref;\n      const messages = [\n        'Hello👋! This message was sent automatically for you to see the application in action.',\n        \"It is sends with a 40% probability. You're lucky if you see it. Have a nice day🎉\"\n      ];\n\n      //Отправка тестовых сообщений\n      setTimeout(() =>\n        this.sendMessageToDB(currentChat, this.createMessageForDB(null, messages[0], senderId))\n      ,500)\n       setTimeout(() =>\n        this.sendMessageToDB(currentChat, this.createMessageForDB(null, messages[1], senderId))\n      ,800)\n    }\n  }\n\n  sendMessageToDB(chat: DocumentReference<chat>, message: messageDB): void {\n    updateDoc(\n      chat,\n      {message: arrayUnion(message)}\n    )\n  }\n\n  constructor(\n    private userData: UserDataService,\n    private dialogTrans: DialogTransferService,\n    private store: AngularFirestore,\n  ) {\n    // Подписка на изменение выбранного диалога\n    dialogTrans.dialog$.pipe(\n      filter(Boolean),\n      switchMap((dialog: UserDialog) => this.getMessagesData(dialog)),\n\n      filter(data => (data.payload.data()?.message.length as number) > (this.messagesData$.getValue()?.length as number)),\n      filter(dialog => dialog.type === 'modified'),\n\n      tap(data => (data.payload.id === 'test-chat')? this.onTestChat(data) : null),\n      map(data => data.payload.data()?.message),\n    ).subscribe(messages =>\n      this.messagesData$.next(messages as message[])\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}