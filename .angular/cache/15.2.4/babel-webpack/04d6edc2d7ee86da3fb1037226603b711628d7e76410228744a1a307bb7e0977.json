{"ast":null,"code":"import { from, switchMap, map, forkJoin, BehaviorSubject, filter } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../../user-data.service\";\nexport class DialogsDataService {\n  constructor(userData) {\n    this.userData = userData;\n    this.dialogs$ = new BehaviorSubject(null);\n    // Func to get data about other user from dialog\n    this.getOtherUserData = users => {\n      const otherUser = this.userData.getOtherUser(users);\n      // @ts-ignore\n      return from(otherUser.get());\n    };\n    // Craft UserDialog object for dialogs component\n    this.createUserDialog = (dialogData, otherUserData) => {\n      const lastMessage = dialogData.data()?.message.slice(-1)[0];\n      if (lastMessage) this.messageLengthFix(lastMessage);\n      return {\n        ref: dialogData.ref,\n        lastMessageValue: lastMessage?.content,\n        lastMessageTime: lastMessage?.time,\n        otherUserName: otherUserData.data()?.name,\n        otherUserPhoto: otherUserData.data()?.photo\n      };\n    };\n    // Get dialog & users data from DB and pass it on\n    this.getDialogAndOtherUser = dialog => {\n      return from(dialog.get()).pipe(switchMap(dialogData => {\n        return this.getOtherUserData(dialogData.data()?.users).pipe(map(otherUserData => this.createUserDialog(dialogData, otherUserData)));\n      }));\n    };\n    //Sub to current user\n    //TODO Could be done better way\n    userData.curUserData$.pipe(filter(user => !!user?.dialogs[0]), switchMap(user => {\n      const dialogObservables = user?.dialogs.map(this.getDialogAndOtherUser);\n      return forkJoin(dialogObservables || []);\n    }), map(dialogs => this.sortDialogs(dialogs))).subscribe(dialogs => this.dialogs$.next(dialogs));\n  }\n  // Fixes message's length to fit left sidebar\n  messageLengthFix(message) {\n    if (message.content.length > 60) message.content = message.content.slice(0, 60) + '...';\n    return message;\n  }\n  // Sorting dialog by date\n  sortDialogs(dialogs) {\n    return dialogs.sort((a, b) => new Date(b.lastMessageTime).getTime() - new Date(a.lastMessageTime).getTime());\n  }\n}\nDialogsDataService.ɵfac = function DialogsDataService_Factory(t) {\n  return new (t || DialogsDataService)(i0.ɵɵinject(i1.UserDataService));\n};\nDialogsDataService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: DialogsDataService,\n  factory: DialogsDataService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["from","switchMap","map","forkJoin","BehaviorSubject","filter","DialogsDataService","constructor","userData","users","otherUser","getOtherUser","get","dialogData","otherUserData","lastMessage","data","message","slice","messageLengthFix","ref","lastMessageValue","content","lastMessageTime","time","otherUserName","name","otherUserPhoto","photo","dialog","pipe","getOtherUserData","createUserDialog","curUserData$","user","dialogs","dialogObservables","getDialogAndOtherUser","sortDialogs","subscribe","dialogs$","next","length","sort","a","b","Date","getTime","factory","providedIn"],"sourceRoot":"","sources":["C:\\Courses\\ANGULAR\\echo\\src\\app\\feature\\messenger\\messenger\\dialogs\\dialogs-data.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  from,\n  Observable,\n  switchMap,\n  map,\n  takeUntil,\n  forkJoin,\n  tap,\n  Subject,\n  BehaviorSubject,\n  filter\n} from \"rxjs\";\nimport {chat, message, UserDataService, UserDB, UserDialog} from \"../../../user-data.service\";\nimport {DocumentSnapshot} from \"@angular/fire/compat/firestore\";\nimport {DocumentReference} from \"@angular/fire/compat/firestore\";\nimport firebase from 'firebase/compat';\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class DialogsDataService {\n  public dialogs$ = new BehaviorSubject<UserDialog[] | null>(null);\n\n  constructor(private userData: UserDataService) {\n    //Sub to current user\n    //TODO Could be done better way\n    userData.curUserData$\n        .pipe(\n            filter(user => !!user?.dialogs[0]),\n            switchMap(user => {\n              const dialogObservables = user?.dialogs.map(this.getDialogAndOtherUser);\n              return forkJoin(dialogObservables || []);\n            }),\n            map(dialogs =>\n              this.sortDialogs(dialogs)\n            ),\n        ).subscribe(\n            dialogs => this.dialogs$.next(dialogs)\n        );\n  }\n\n  // Func to get data about other user from dialog\n  public getOtherUserData = (users: DocumentReference<UserDB>[]): Observable<DocumentSnapshot<UserDB>> => {\n    const otherUser = this.userData.getOtherUser(users);\n    // @ts-ignore\n    return from(otherUser.get());\n  };\n\n  // Fixes message's length to fit left sidebar\n  public messageLengthFix(message: message):message {\n    if(message.content.length > 60) message.content = message.content.slice(0, 60) + '...';\n    return message;\n  }\n\n  // Craft UserDialog object for dialogs component\n  private createUserDialog = (dialogData: firebase.firestore.DocumentSnapshot<chat>, otherUserData: DocumentSnapshot<UserDB>): UserDialog => {\n      const lastMessage = dialogData.data()?.message.slice(-1)[0] as message;\n      if (lastMessage) this.messageLengthFix(lastMessage);\n      return {\n          ref: dialogData.ref,\n          lastMessageValue: lastMessage?.content,\n          lastMessageTime: lastMessage?.time,\n          otherUserName: otherUserData.data()?.name as string,\n          otherUserPhoto: otherUserData.data()?.photo as string\n      };\n  };\n\n  // Get dialog & users data from DB and pass it on\n  private getDialogAndOtherUser = (dialog: DocumentReference<chat>): Observable<UserDialog> => {\n    return from(dialog.get()).pipe(\n      switchMap((dialogData) => {\n          return this.getOtherUserData(dialogData.data()?.users as DocumentReference<UserDB>[]).pipe(\n            map(otherUserData => this.createUserDialog(dialogData, otherUserData))\n          )\n        }\n      )\n    );\n  };\n\n  // Sorting dialog by date\n  private sortDialogs(dialogs: UserDialog[]): UserDialog[] {\n    return dialogs.sort((a, b) => new Date(b.lastMessageTime as string).getTime() - new Date(a.lastMessageTime as string).getTime());\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}