{"ast":null,"code":"import { from, switchMap, map, forkJoin, tap, BehaviorSubject, filter } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../../user-data.service\";\nexport class DialogsDataService {\n  messageLengthFix(message) {\n    if (message.content.length > 60) message.content = message.content.slice(0, 60) + '...';\n    return message;\n  }\n  // Соритровка диалога по дате\n  sortDialogs(dialogs) {\n    return dialogs.sort((a, b) => new Date(b.lastMessageTime).getTime() - new Date(a.lastMessageTime).getTime());\n  }\n  constructor(userData) {\n    this.userData = userData;\n    this.dialogs$ = new BehaviorSubject(null);\n    // Функция для получения данных о другом пользователе\n    this.getOtherUserData = users => {\n      const otherUser = this.userData.getOtherUser(users);\n      // @ts-ignore\n      return from(otherUser.get());\n    };\n    // Функция для создания объекта UserDialog\n    this.createUserDialog = (dialogData, otherUserData) => {\n      const lastMessage = dialogData.data()?.message.slice(-1)[0];\n      if (lastMessage) this.messageLengthFix(lastMessage);\n      return {\n        ref: dialogData.ref,\n        lastMessageValue: lastMessage?.content,\n        lastMessageTime: lastMessage?.time,\n        otherUserName: otherUserData.data()?.name,\n        otherUserPhoto: otherUserData.data()?.photo\n      };\n    };\n    // Функция для получения информации о диалоге и другом пользователе\n    this.getDialogAndOtherUser = dialog => {\n      return from(dialog.get()).pipe(switchMap(dialogData => {\n        return this.getOtherUserData(dialogData.data()?.users).pipe(map(otherUserData => this.createUserDialog(dialogData, otherUserData)));\n      }));\n    };\n    //Подписка на изменение юзера\n    userData.curUserData$.pipe(filter(Boolean), filter(user => !!user && !!user.dialogs[0]), switchMap(user => {\n      const dialogObservables = user.dialogs.map(this.getDialogAndOtherUser);\n      return forkJoin(dialogObservables || []);\n    }), tap(dialogs => {\n      this.sortDialogs(dialogs);\n      this.dialogs$.next(dialogs);\n    })).subscribe();\n  }\n}\nDialogsDataService.ɵfac = function DialogsDataService_Factory(t) {\n  return new (t || DialogsDataService)(i0.ɵɵinject(i1.UserDataService));\n};\nDialogsDataService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: DialogsDataService,\n  factory: DialogsDataService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["from","switchMap","map","forkJoin","tap","BehaviorSubject","filter","DialogsDataService","messageLengthFix","message","content","length","slice","sortDialogs","dialogs","sort","a","b","Date","lastMessageTime","getTime","constructor","userData","users","otherUser","getOtherUser","get","dialogData","otherUserData","lastMessage","data","ref","lastMessageValue","time","otherUserName","name","otherUserPhoto","photo","dialog","pipe","getOtherUserData","createUserDialog","curUserData$","Boolean","user","dialogObservables","getDialogAndOtherUser","dialogs$","next","subscribe","factory","providedIn"],"sourceRoot":"","sources":["C:\\Courses\\ANGULAR\\echo\\src\\app\\feature\\messenger\\messenger\\dialogs\\dialogs-data.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  from,\n  Observable,\n  switchMap,\n  map,\n  takeUntil,\n  forkJoin,\n  tap,\n  Subject,\n  BehaviorSubject,\n  filter\n} from \"rxjs\";\nimport {chat, message, UserDataService, UserDB, UserDialog} from \"../../../user-data.service\";\nimport {DocumentSnapshot} from \"@angular/fire/compat/firestore\";\nimport {DocumentReference} from \"@angular/fire/compat/firestore\";\nimport firebase from 'firebase/compat';\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class DialogsDataService {\n  dialogs$ = new BehaviorSubject<UserDialog[] | null>(null);\n\n  // Функция для получения данных о другом пользователе\n  public getOtherUserData = (users: DocumentReference<UserDB>[]): Observable<DocumentSnapshot<UserDB>> => {\n    const otherUser = this.userData.getOtherUser(users);\n    // @ts-ignore\n    return from(otherUser.get());\n  };\n\n  public messageLengthFix(message: message):message {\n    if(message.content.length > 60) message.content = message.content.slice(0, 60) + '...';\n    return message;\n  }\n\n  // Функция для создания объекта UserDialog\n  private createUserDialog = (dialogData: firebase.firestore.DocumentSnapshot<chat>, otherUserData: DocumentSnapshot<UserDB>): UserDialog => {\n    const lastMessage = dialogData.data()?.message.slice(-1)[0] as message;\n    if(lastMessage) this.messageLengthFix(lastMessage);\n    return {\n      ref: dialogData.ref,\n      lastMessageValue: lastMessage?.content,\n      lastMessageTime: lastMessage?.time,\n      otherUserName: otherUserData.data()?.name as string,\n      otherUserPhoto: otherUserData.data()?.photo as string\n    };\n  };\n\n  // Функция для получения информации о диалоге и другом пользователе\n  getDialogAndOtherUser = (dialog: DocumentReference<chat>): Observable<UserDialog> => {\n    return from(dialog.get()).pipe(\n      switchMap((dialogData) => {\n          return this.getOtherUserData(dialogData.data()?.users as DocumentReference<UserDB>[]).pipe(\n            map(otherUserData => this.createUserDialog(dialogData, otherUserData))\n          )\n        }\n      )\n    );\n  };\n\n  // Соритровка диалога по дате\n  sortDialogs(dialogs: UserDialog[]): UserDialog[] {\n    return dialogs.sort((a, b) => new Date(b.lastMessageTime as string).getTime() - new Date(a.lastMessageTime as string).getTime());\n  }\n\n  constructor(\n    private userData: UserDataService,\n    ) {\n    //Подписка на изменение юзера\n    userData.curUserData$\n      .pipe(\n        filter(Boolean),\n        filter(user => !!user && !!user.dialogs[0]),\n        switchMap(user => {\n          const dialogObservables = user.dialogs.map(this.getDialogAndOtherUser);\n          return forkJoin(dialogObservables || []);\n        }),\n        tap(dialogs => {\n          this.sortDialogs(dialogs)\n          this.dialogs$.next(dialogs)\n        }),\n      )\n      .subscribe();\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}