{"ast":null,"code":"import { from, switchMap, map, forkJoin, BehaviorSubject, filter } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../../user-data.service\";\nexport class DialogsDataService {\n  constructor(userData) {\n    this.userData = userData;\n    this.dialogs$ = new BehaviorSubject(null);\n    // Func to get data about other user from dialog\n    this.getOtherUserData = users => {\n      const otherUser = this.userData.getOtherUser(users);\n      // @ts-ignore\n      return from(otherUser.get());\n    };\n    // Craft UserDialog object for dialogs component\n    this.createUserDialog = (dialogData, otherUserData) => {\n      const lastMessage = dialogData.data()?.message.slice(-1)[0];\n      if (lastMessage) this.messageLengthFix(lastMessage);\n      return {\n        ref: dialogData.ref,\n        lastMessageValue: lastMessage?.content,\n        lastMessageTime: lastMessage?.time,\n        otherUserName: otherUserData.data()?.name,\n        otherUserPhoto: otherUserData.data()?.photo\n      };\n    };\n    // Get dialog & users data from DB and pass it on\n    this.getDialogAndOtherUser = dialog => {\n      return from(dialog.get()).pipe(switchMap(dialogData => {\n        return this.getOtherUserData(dialogData.data()?.users).pipe(map(otherUserData => this.createUserDialog(dialogData, otherUserData)));\n      }));\n    };\n    //Sub to current user\n    //TODO Could be done better way\n    userData.curUserData$.pipe(filter(user => !!user?.dialogs[0]), switchMap(user => {\n      const dialogObservables = user?.dialogs.map(this.getDialogAndOtherUser);\n      return forkJoin(dialogObservables || []);\n    }), map(dialogs => this.sortDialogs(dialogs))).subscribe(dialogs => this.dialogs$.next(dialogs));\n  }\n  // Fixes message's length to fit left sidebar\n  messageLengthFix(message) {\n    if (message.content.length > 60) message.content = message.content.slice(0, 60) + '...';\n    return message;\n  }\n  // Sorting dialog by date\n  sortDialogs(dialogs) {\n    return dialogs.sort((a, b) => new Date(b.lastMessageTime).getTime() - new Date(a.lastMessageTime).getTime());\n  }\n}\nDialogsDataService.ɵfac = function DialogsDataService_Factory(t) {\n  return new (t || DialogsDataService)(i0.ɵɵinject(i1.UserDataService));\n};\nDialogsDataService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: DialogsDataService,\n  factory: DialogsDataService.ɵfac,\n  providedIn: 'root'\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}