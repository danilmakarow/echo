{"ast":null,"code":"import { BehaviorSubject, skip, Subject, takeUntil, tap } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/compat/firestore\";\nimport * as i2 from \"../../../dialog-transfer.service\";\nimport * as i3 from \"./dialogs-data.service\";\nimport * as i4 from \"@angular/material/icon\";\nimport * as i5 from \"@angular/material/button\";\nimport * as i6 from \"@angular/material/menu\";\nimport * as i7 from \"./dialog/dialog.component\";\nimport * as i8 from \"@angular/common\";\nexport class DialogsComponent {\n  constructor(store, dialogTrans, dialogData, cdr) {\n    this.store = store;\n    this.dialogTrans = dialogTrans;\n    this.dialogData = dialogData;\n    this.cdr = cdr;\n    this.dialogs$ = new BehaviorSubject(null);\n    this.unsubscribe$ = new Subject();\n  }\n  ngOnInit() {\n    this.subscribeToDialogs();\n  }\n  // Getting dialogs and sending them to subscription func\n  subscribeToDialogs() {\n    this.dialogData.dialogs$.pipe(takeUntil(this.unsubscribe$), tap(dialogs => this.dialogs$.next(dialogs))).subscribe(dialogs => dialogs?.forEach(dialog => this.dialogSubscription(dialog)));\n  }\n  // Sub to changes to each dialog\n  dialogSubscription(dialog) {\n    this.store.doc(`chats/${dialog.ref.id}`).valueChanges().pipe(takeUntil(this.unsubscribe$), skip(1)).subscribe(newDialog => {\n      this.createDialogUpdate(dialog, newDialog);\n    });\n  }\n  // Takes old dialog and modifies it with data from updated one\n  createDialogUpdate(dialog, newDialog) {\n    let dialogEl = this.dialogs$.getValue()?.find(dialogEl => dialogEl === dialog);\n    dialogEl = this.changeDialog(dialogEl, newDialog);\n    this.dialogToTop(dialogEl);\n  }\n  // Cuts dialog from dialogs array and puts it on top\n  dialogToTop(dialog) {\n    console.log('wassup bozo');\n    const dialogs = this.dialogs$.getValue();\n    dialogs?.splice(dialogs?.findIndex(el => el.ref.id === dialog.ref.id), 1);\n    dialogs?.unshift(dialog);\n    this.dialogs$.next(dialogs);\n  }\n  // Takes last message from updated dialog and modifies old one\n  changeDialog(oldDialog, updatedDialog) {\n    const lastMessage = updatedDialog.message.slice(-1)[0];\n    this.dialogData.messageLengthFix(lastMessage);\n    oldDialog.lastMessageValue = lastMessage?.content;\n    oldDialog.lastMessageTime = lastMessage?.time;\n    return oldDialog;\n  }\n  ngOnDestroy() {\n    this.unsubscribe$.next();\n    this.unsubscribe$.complete();\n  }\n}\nDialogsComponent.ɵfac = function DialogsComponent_Factory(t) {\n  return new (t || DialogsComponent)(i0.ɵɵdirectiveInject(i1.AngularFirestore), i0.ɵɵdirectiveInject(i2.DialogTransferService), i0.ɵɵdirectiveInject(i3.DialogsDataService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n};\nDialogsComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: DialogsComponent,\n  selectors: [[\"app-dialogs\"]],\n  decls: 34,\n  vars: 4,\n  consts: [[1, \"container\"], [1, \"header\", \"flex\"], [\"mat-icon-button\", \"\", \"color\", \"accent\", 3, \"matMenuTriggerFor\"], [\"menu\", \"matMenu\"], [\"mat-menu-item\", \"\"], [1, \"search-box\"], [\"type\", \"text\", \"placeholder\", \"Search...\", 1, \"search-input\"], [1, \"icon\", \"search-icon\"], [1, \"main\"], [3, \"dialogs\", \"selectedDialog\"]],\n  template: function DialogsComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"header\", 1)(2, \"button\", 2)(3, \"mat-icon\");\n      i0.ɵɵtext(4, \"more_vert\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(5, \"mat-menu\", null, 3)(7, \"button\", 4)(8, \"mat-icon\");\n      i0.ɵɵtext(9, \"person\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(10, \"span\");\n      i0.ɵɵtext(11, \"Your Profile\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(12, \"button\", 4)(13, \"mat-icon\");\n      i0.ɵɵtext(14, \"edit\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(15, \"span\");\n      i0.ɵɵtext(16, \"Start new chat\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(17, \"button\", 4)(18, \"mat-icon\");\n      i0.ɵɵtext(19, \"contacts\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(20, \"span\");\n      i0.ɵɵtext(21, \"Contacts\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(22, \"button\", 4)(23, \"mat-icon\");\n      i0.ɵɵtext(24, \"notifications_off\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(25, \"span\");\n      i0.ɵɵtext(26, \"Disable alerts\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(27, \"div\", 5);\n      i0.ɵɵelement(28, \"input\", 6);\n      i0.ɵɵelementStart(29, \"mat-icon\", 7);\n      i0.ɵɵtext(30, \"search\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(31, \"main\", 8)(32, \"app-dialog\", 9);\n      i0.ɵɵlistener(\"selectedDialog\", function DialogsComponent_Template_app_dialog_selectedDialog_32_listener($event) {\n        return ctx.dialogTrans.dialog$.next($event);\n      });\n      i0.ɵɵpipe(33, \"async\");\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      const _r0 = i0.ɵɵreference(6);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"matMenuTriggerFor\", _r0);\n      i0.ɵɵadvance(30);\n      i0.ɵɵproperty(\"dialogs\", i0.ɵɵpipeBind1(33, 2, ctx.dialogs$));\n    }\n  },\n  dependencies: [i4.MatIcon, i5.MatIconButton, i6.MatMenu, i6.MatMenuItem, i6.MatMenuTrigger, i7.DialogComponent, i8.AsyncPipe],\n  styles: [\".container[_ngcontent-%COMP%] {\\n  height: 100%;\\n  background-color: #18181b;\\n  border-right: 1px solid #2e2e2e;\\n}\\n\\n\\n.header[_ngcontent-%COMP%] {\\n  align-items: center;\\n  background-color: #1f1f21;\\n  box-shadow: 0 2px 2px rgba(0, 0, 0, 0.25098);\\n}\\n\\n.search-box[_ngcontent-%COMP%] {\\n  width: 100%;\\n  padding: 1.3rem;\\n  position: relative;\\n}\\n\\n.search-input[_ngcontent-%COMP%] {\\n  width: 100%;\\n  border: none;\\n  padding: 1.2rem 1.5rem 1.2rem 4rem;\\n  border-radius: 20px;\\n  font-size: 1.6rem;\\n  color: #fff;\\n  background-color: #27272a;\\n  transition: 0.1s;\\n}\\n\\n.search-input[_ngcontent-%COMP%]:focus {\\n  outline: 2px solid #5f3dc4;\\n}\\n\\n.search-icon[_ngcontent-%COMP%] {\\n  position: absolute;\\n  left: 23px;\\n  top: 22px;\\n}\\n\\n.main[_ngcontent-%COMP%] {\\n  padding: 1rem;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvZmVhdHVyZS9tZXNzZW5nZXIvbWVzc2VuZ2VyL2RpYWxvZ3MvZGlhbG9ncy5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLFlBQUE7RUFDQSx5QkFBQTtFQUNBLCtCQUFBO0FBQ0Y7O0FBRUEsU0FBQTtBQUVBO0VBQ0UsbUJBQUE7RUFDQSx5QkFBQTtFQUNBLDRDQUFBO0FBQUY7O0FBR0E7RUFDRSxXQUFBO0VBQ0EsZUFBQTtFQUNBLGtCQUFBO0FBQUY7O0FBR0E7RUFDRSxXQUFBO0VBQ0EsWUFBQTtFQUNBLGtDQUFBO0VBQ0EsbUJBQUE7RUFFQSxpQkFBQTtFQUNBLFdBQUE7RUFDQSx5QkFBQTtFQUNBLGdCQUFBO0FBREY7O0FBR0E7RUFDRSwwQkFBQTtBQUFGOztBQUdBO0VBQ0Usa0JBQUE7RUFDQSxVQUFBO0VBQ0EsU0FBQTtBQUFGOztBQUtBO0VBQ0UsYUFBQTtBQUZGIiwic291cmNlc0NvbnRlbnQiOlsiLmNvbnRhaW5lciB7XHJcbiAgaGVpZ2h0OiAxMDAlO1xyXG4gIGJhY2tncm91bmQtY29sb3I6ICMxODE4MWI7XHJcbiAgYm9yZGVyLXJpZ2h0OiAxcHggc29saWQgIzJlMmUyZTtcclxufVxyXG5cclxuLypIRUFERVIqL1xyXG5cclxuLmhlYWRlciB7XHJcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMWYxZjIxO1xyXG4gIGJveC1zaGFkb3c6IDAgMnB4IDJweCByZ2JhKDAsMCwwLDAuMjUwOTgpXHJcbn1cclxuXHJcbi5zZWFyY2gtYm94IHtcclxuICB3aWR0aDogMTAwJTtcclxuICBwYWRkaW5nOiAxLjNyZW07XHJcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG59XHJcblxyXG4uc2VhcmNoLWlucHV0IHtcclxuICB3aWR0aDogMTAwJTtcclxuICBib3JkZXI6IG5vbmU7XHJcbiAgcGFkZGluZzogMS4ycmVtIDEuNXJlbSAxLjJyZW0gNHJlbTtcclxuICBib3JkZXItcmFkaXVzOiAyMHB4O1xyXG5cclxuICBmb250LXNpemU6IDEuNnJlbTtcclxuICBjb2xvcjogI2ZmZjtcclxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMjcyNzJhO1xyXG4gIHRyYW5zaXRpb246IDAuMXM7XHJcbn1cclxuLnNlYXJjaC1pbnB1dDpmb2N1c3tcclxuICBvdXRsaW5lOiAycHggc29saWQgIzVmM2RjNDtcclxufVxyXG5cclxuLnNlYXJjaC1pY29uIHtcclxuICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgbGVmdDogMjNweDtcclxuICB0b3A6IDIycHg7XHJcbn1cclxuXHJcbi8vIE1BSU4gLy9cclxuXHJcbi5tYWluIHtcclxuICBwYWRkaW5nOiAxcmVtO1xyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiIn0= */\"],\n  changeDetection: 0\n});","map":{"version":3,"mappings":"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","names":["BehaviorSubject","skip","Subject","takeUntil","tap","DialogsComponent","constructor","store","dialogTrans","dialogData","cdr","ngOnInit","subscribeToDialogs","dialogs$","pipe","unsubscribe$","dialogs","next","subscribe","forEach","dialog","dialogSubscription","doc","ref","id","valueChanges","newDialog","createDialogUpdate","dialogEl","getValue","find","changeDialog","dialogToTop","console","log","splice","findIndex","el","unshift","oldDialog","updatedDialog","lastMessage","message","slice","messageLengthFix","lastMessageValue","content","lastMessageTime","time","ngOnDestroy","complete","selectors","decls","vars","consts","template","i0","ctx"],"sourceRoot":"","sources":["C:\\Courses\\ANGULAR\\echo\\src\\app\\feature\\messenger\\messenger\\dialogs\\dialogs.component.ts","C:\\Courses\\ANGULAR\\echo\\src\\app\\feature\\messenger\\messenger\\dialogs\\dialogs.component.html"],"sourcesContent":["import {ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit} from '@angular/core';\nimport {AngularFirestore, DocumentReference, DocumentSnapshot} from \"@angular/fire/compat/firestore\";\nimport {chat, message, UserDialog} from \"../../../user-data.service\";\nimport {DialogTransferService} from \"../../../dialog-transfer.service\";\nimport {BehaviorSubject, filter, map, Observable, skip, Subject, Subscription, take, takeUntil, tap} from \"rxjs\";\nimport {DialogsDataService} from \"./dialogs-data.service\";\n\nexport interface newMessage {\n  ref: string,\n  mes: Observable<message | undefined>\n}\n\n@Component({\n  selector: 'app-dialogs',\n  templateUrl: './dialogs.component.html',\n  styleUrls: ['./dialogs.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class DialogsComponent implements OnInit, OnDestroy {\n  public dialogs$ = new BehaviorSubject<UserDialog[] | null>(null);\n\n  constructor(\n      private store: AngularFirestore,\n      public dialogTrans:DialogTransferService,\n      private dialogData: DialogsDataService,\n      private cdr: ChangeDetectorRef,\n  ) {\n  }\n\n  ngOnInit() {\n    this.subscribeToDialogs();\n  }\n\n  // Getting dialogs and sending them to subscription func\n  subscribeToDialogs() {\n    this.dialogData.dialogs$.pipe(\n      takeUntil(this.unsubscribe$),\n      tap(dialogs => this.dialogs$.next(dialogs as UserDialog[])),\n    ).subscribe(\n        dialogs =>\n          dialogs?.forEach(dialog => this.dialogSubscription(dialog))\n        );\n  }\n\n  // Sub to changes to each dialog\n  private dialogSubscription(dialog: UserDialog): void {\n    this.store.doc<chat>(`chats/${dialog.ref.id}`).valueChanges()\n        .pipe(\n          takeUntil(this.unsubscribe$),\n          skip(1),\n        ).subscribe(\n          newDialog => {\n            this.createDialogUpdate(dialog, newDialog as chat);\n          }\n        );\n  }\n\n  // Takes old dialog and modifies it with data from updated one\n  private createDialogUpdate(dialog: UserDialog, newDialog:chat): void {\n    let dialogEl = this.dialogs$.getValue()?.find(dialogEl => dialogEl === dialog)\n    dialogEl = this.changeDialog(dialogEl as UserDialog, newDialog)\n    this.dialogToTop(dialogEl)\n  }\n\n  // Cuts dialog from dialogs array and puts it on top\n  private dialogToTop(dialog: UserDialog): void {\n    console.log('wassup bozo')\n\n    const dialogs = this.dialogs$.getValue()\n    dialogs?.splice(dialogs?.findIndex(el => el.ref.id === dialog.ref.id), 1);\n    dialogs?.unshift(dialog);\n    this.dialogs$.next(dialogs)\n  }\n\n  // Takes last message from updated dialog and modifies old one\n  private changeDialog(oldDialog: UserDialog, updatedDialog: chat): UserDialog {\n    const lastMessage = updatedDialog.message.slice(-1)[0];\n    this.dialogData.messageLengthFix(lastMessage)\n    oldDialog.lastMessageValue = lastMessage?.content;\n    oldDialog.lastMessageTime = lastMessage?.time;\n    return oldDialog\n  }\n\n  private unsubscribe$ = new Subject<void>();\n  ngOnDestroy() {\n    this.unsubscribe$.next();\n    this.unsubscribe$.complete();\n  }\n}\n\n","<div class=\"container\">\n  <header class=\"header flex\">\n    <button mat-icon-button [matMenuTriggerFor]=\"menu\" color=\"accent\">\n      <mat-icon>more_vert</mat-icon>\n    </button>\n    <mat-menu #menu=\"matMenu\">\n      <button mat-menu-item>\n        <mat-icon>person</mat-icon>\n        <span>Your Profile</span>\n      </button>\n      <button mat-menu-item>\n        <mat-icon>edit</mat-icon>\n        <span>Start new chat</span>\n      </button>\n      <button mat-menu-item>\n        <mat-icon>contacts</mat-icon>\n        <span>Contacts</span>\n      </button>\n      <button mat-menu-item>\n        <mat-icon>notifications_off</mat-icon>\n        <span>Disable alerts</span>\n      </button>\n    </mat-menu>\n    <div class=\"search-box\">\n      <input type=\"text\" class=\"search-input\" placeholder=\"Search...\">\n      <mat-icon class=\"icon search-icon\">search</mat-icon>\n    </div>\n  </header>\n  <main class=\"main\">\n    <app-dialog (selectedDialog)=\"dialogTrans.dialog$.next($event)\" [dialogs]=\"dialogs$ | async\"></app-dialog>\n  </main>\n</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}