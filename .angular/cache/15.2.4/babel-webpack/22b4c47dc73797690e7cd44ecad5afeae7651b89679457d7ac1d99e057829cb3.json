{"ast":null,"code":"import { skip, Subject, takeUntil, tap } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/compat/firestore\";\nimport * as i2 from \"../../../dialog-transfer.service\";\nimport * as i3 from \"./dialogs-data.service\";\nimport * as i4 from \"@angular/material/icon\";\nimport * as i5 from \"@angular/material/button\";\nimport * as i6 from \"@angular/material/menu\";\nimport * as i7 from \"./dialog/dialog.component\";\nexport class DialogsComponent {\n  constructor(store, dialogTrans, dialogData) {\n    this.store = store;\n    this.dialogTrans = dialogTrans;\n    this.dialogData = dialogData;\n    this.unsubscribe$ = new Subject();\n  }\n  ngOnInit() {\n    this.subscribeToDialogs();\n  }\n  // Getting dialogs and sending them to subscription func\n  subscribeToDialogs() {\n    this.dialogData.dialogs$.pipe(takeUntil(this.unsubscribe$), tap(dialogs => this.dialogs = dialogs)).subscribe(dialogs => dialogs?.forEach(dialog => this.dialogSubscription(dialog)));\n  }\n  // Sub to changes to each dialog\n  dialogSubscription(dialog) {\n    this.store.doc(`chats/${dialog.ref.id}`).valueChanges().pipe(takeUntil(this.unsubscribe$), skip(1)).subscribe(newDialog => this.createDialogUpdate(dialog, newDialog));\n  }\n  // Takes old dialog and modifies it with data from updated one\n  createDialogUpdate(dialog, newDialog) {\n    let dialogEl = this.dialogs?.find(dialogEl => dialogEl === dialog);\n    dialogEl = this.changeDialog(dialogEl, newDialog);\n    this.dialogToTop(dialogEl);\n  }\n  // Cuts dialog from dialogs array and puts it on top\n  dialogToTop(dialog) {\n    this.dialogs?.splice(this.dialogs?.findIndex(el => el.ref.id === dialog.ref.id), 1);\n    this.dialogs?.unshift(dialog);\n  }\n  // Takes last message from updated dialog and modifies old one\n  changeDialog(oldDialog, updatedDialog) {\n    const lastMessage = updatedDialog.message.slice(-1)[0];\n    this.dialogData.messageLengthFix(lastMessage);\n    oldDialog.lastMessageValue = lastMessage?.content;\n    oldDialog.lastMessageTime = lastMessage?.time;\n    return oldDialog;\n  }\n  ngOnDestroy() {\n    this.unsubscribe$.next();\n    this.unsubscribe$.complete();\n  }\n}\nDialogsComponent.ɵfac = function DialogsComponent_Factory(t) {\n  return new (t || DialogsComponent)(i0.ɵɵdirectiveInject(i1.AngularFirestore), i0.ɵɵdirectiveInject(i2.DialogTransferService), i0.ɵɵdirectiveInject(i3.DialogsDataService));\n};\nDialogsComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: DialogsComponent,\n  selectors: [[\"app-dialogs\"]],\n  decls: 33,\n  vars: 2,\n  consts: [[1, \"container\"], [1, \"header\", \"flex\"], [\"mat-icon-button\", \"\", \"color\", \"accent\", 3, \"matMenuTriggerFor\"], [\"menu\", \"matMenu\"], [\"mat-menu-item\", \"\"], [1, \"search-box\"], [\"type\", \"text\", \"placeholder\", \"Search...\", 1, \"search-input\"], [1, \"icon\", \"search-icon\"], [1, \"main\"], [3, \"dialogs\", \"selectedDialog\"]],\n  template: function DialogsComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"header\", 1)(2, \"button\", 2)(3, \"mat-icon\");\n      i0.ɵɵtext(4, \"more_vert\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(5, \"mat-menu\", null, 3)(7, \"button\", 4)(8, \"mat-icon\");\n      i0.ɵɵtext(9, \"person\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(10, \"span\");\n      i0.ɵɵtext(11, \"Your Profile\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(12, \"button\", 4)(13, \"mat-icon\");\n      i0.ɵɵtext(14, \"edit\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(15, \"span\");\n      i0.ɵɵtext(16, \"Start new chat\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(17, \"button\", 4)(18, \"mat-icon\");\n      i0.ɵɵtext(19, \"contacts\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(20, \"span\");\n      i0.ɵɵtext(21, \"Contacts\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(22, \"button\", 4)(23, \"mat-icon\");\n      i0.ɵɵtext(24, \"notifications_off\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(25, \"span\");\n      i0.ɵɵtext(26, \"Disable alerts\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(27, \"div\", 5);\n      i0.ɵɵelement(28, \"input\", 6);\n      i0.ɵɵelementStart(29, \"mat-icon\", 7);\n      i0.ɵɵtext(30, \"search\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(31, \"main\", 8)(32, \"app-dialog\", 9);\n      i0.ɵɵlistener(\"selectedDialog\", function DialogsComponent_Template_app_dialog_selectedDialog_32_listener($event) {\n        return ctx.dialogTrans.dialog$.next($event);\n      });\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      const _r0 = i0.ɵɵreference(6);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"matMenuTriggerFor\", _r0);\n      i0.ɵɵadvance(30);\n      i0.ɵɵproperty(\"dialogs\", ctx.dialogs);\n    }\n  },\n  dependencies: [i4.MatIcon, i5.MatIconButton, i6.MatMenu, i6.MatMenuItem, i6.MatMenuTrigger, i7.DialogComponent],\n  styles: [\".container[_ngcontent-%COMP%]{height:100%;background-color:#18181b;border-right:1px solid #2e2e2e}.header[_ngcontent-%COMP%]{align-items:center;background-color:#1f1f21;box-shadow:0 2px 2px #00000040}.search-box[_ngcontent-%COMP%]{width:100%;padding:1.3rem;position:relative}.search-input[_ngcontent-%COMP%]{width:100%;border:none;padding:1.2rem 1.5rem 1.2rem 4rem;border-radius:20px;font-size:1.6rem;color:#fff;background-color:#27272a;transition:.1s}.search-input[_ngcontent-%COMP%]:focus{outline:2px solid #5f3dc4}.search-icon[_ngcontent-%COMP%]{position:absolute;left:23px;top:22px}.main[_ngcontent-%COMP%]{padding:1rem}\"]\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}