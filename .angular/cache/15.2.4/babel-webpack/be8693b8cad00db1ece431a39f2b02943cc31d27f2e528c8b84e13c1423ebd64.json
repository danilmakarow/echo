{"ast":null,"code":"import { BehaviorSubject, filter, from, map, switchMap, tap } from \"rxjs\";\nimport { arrayUnion, updateDoc } from \"@angular/fire/firestore\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../../user-data.service\";\nimport * as i2 from \"../../../dialog-transfer.service\";\nimport * as i3 from \"@angular/fire/compat/firestore\";\nexport class ChatDataService {\n  constructor(userData, dialogTrans, store) {\n    this.userData = userData;\n    this.dialogTrans = dialogTrans;\n    this.store = store;\n    this.chatData$ = new BehaviorSubject(null);\n    this.messagesData$ = new BehaviorSubject(null);\n    //Subscription to changes in opened Dialog\n    dialogTrans.dialog$.pipe(filter(Boolean), switchMap(dialog => this.getMessagesData(dialog)), filter(data => data.payload.data()?.message.length > this.messagesData$.getValue()?.length), filter(dialog => dialog.type === 'modified'), tap(data => data.payload.id === 'test-chat' ? this.onTestChat(data) : null), map(data => data.payload.data()?.message)).subscribe(messages => this.messagesData$.next(messages));\n  }\n  onSendMessage(messageEl) {\n    const message = messageEl.value.trim();\n    if (!message) return;\n    messageEl.value = '';\n    this.messageHeightCalc(messageEl);\n    this.sendMessageToDB(this.chatData$.getValue()?.ref, this.createMessageForDB(messageEl, message));\n  }\n  messageHeightCalc(textarea) {\n    textarea.style.height = 'auto'; // Resetting height\n    textarea.style.height = textarea.scrollHeight - 22 + 'px'; // Setting new height based on content height\n  }\n\n  createMessageForDB(messageEl, message, user = this.userData.curUserDoc?.ref) {\n    return {\n      content: message,\n      senderId: user,\n      time: new Date().toISOString()\n    };\n  }\n  getMessagesData(dialog) {\n    from(dialog.ref.get()).subscribe(chat => this.setNewUserAndMessages(dialog.otherUserName, dialog.otherUserPhoto, dialog.ref, chat.data()?.message));\n    return this.store.doc(`chats/${dialog.ref.id}`).snapshotChanges();\n  }\n  setNewUserAndMessages(name, photo, ref, messages) {\n    this.chatData$.next({\n      name,\n      photo,\n      ref\n    });\n    this.messagesData$.next(messages);\n  }\n  randomBoolean() {\n    return Math.random() < 0.4;\n  }\n  getTestMessageData() {\n    const currentChat = this.chatData$.getValue()?.ref;\n    const senderId = this.store.doc(`users/H89Non7WmWztp02NPxMO`).ref;\n    const messages = ['HelloðŸ‘‹! This message was sent automatically for you to see the application in action.', \"It is sends with a 40% probability. You're lucky if you see it. Have a nice dayðŸŽ‰\"];\n    return {\n      currentChat,\n      senderId,\n      messages\n    };\n  }\n  onTestChat(test) {\n    const random = this.randomBoolean();\n    if (test.payload.data()?.message.slice(-1)[0].senderId.id === 'test--main' && random) {\n      const {\n        currentChat,\n        senderId,\n        messages\n      } = this.getTestMessageData();\n      //Sending Test Messages\n      setTimeout(() => this.sendMessageToDB(currentChat, this.createMessageForDB(null, messages[0], senderId)), 500);\n      setTimeout(() => this.sendMessageToDB(currentChat, this.createMessageForDB(null, messages[1], senderId)), 800);\n    }\n  }\n  sendMessageToDB(chat, message) {\n    updateDoc(chat, {\n      message: arrayUnion(message)\n    });\n  }\n}\nChatDataService.Éµfac = function ChatDataService_Factory(t) {\n  return new (t || ChatDataService)(i0.ÉµÉµinject(i1.UserDataService), i0.ÉµÉµinject(i2.DialogTransferService), i0.ÉµÉµinject(i3.AngularFirestore));\n};\nChatDataService.Éµprov = /*@__PURE__*/i0.ÉµÉµdefineInjectable({\n  token: ChatDataService,\n  factory: ChatDataService.Éµfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["BehaviorSubject","filter","from","map","switchMap","tap","arrayUnion","updateDoc","ChatDataService","constructor","userData","dialogTrans","store","dialog$","pipe","Boolean","dialog","getMessagesData","data","payload","message","length","messagesData$","getValue","type","id","onTestChat","subscribe","messages","next","onSendMessage","messageEl","value","trim","messageHeightCalc","sendMessageToDB","chatData$","ref","createMessageForDB","textarea","style","height","scrollHeight","user","curUserDoc","content","senderId","time","Date","toISOString","get","chat","setNewUserAndMessages","otherUserName","otherUserPhoto","doc","snapshotChanges","name","photo","randomBoolean","Math","random","getTestMessageData","currentChat","test","slice","setTimeout","factory","providedIn"],"sourceRoot":"","sources":["C:\\Courses\\ANGULAR\\echo\\src\\app\\feature\\messenger\\messenger\\chat\\chat-data.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {DialogTransferService} from \"../../../dialog-transfer.service\";\nimport {BehaviorSubject, filter, from, map, Observable, of, switchMap, tap} from \"rxjs\";\nimport {message, UserDialog, chat, UserDataService, UserDB} from \"../../../user-data.service\";\nimport {Action, AngularFirestore, DocumentReference, DocumentSnapshot} from \"@angular/fire/compat/firestore\";\nimport {arrayUnion, updateDoc} from \"@angular/fire/firestore\";\n\nexport interface ChatData {\n  name: string,\n  photo: string,\n  ref: DocumentReference<chat>\n}\n\nexport interface messageDB {\n  content: string,\n  senderId: DocumentReference,\n  time: string\n}\n\nexport interface chatData {\n  currentChat: DocumentReference<chat>,\n  senderId: DocumentReference<UserDB>,\n  messages: string[]\n}\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class ChatDataService {\n  public chatData$ = new BehaviorSubject<ChatData | null>(null);\n  public messagesData$ = new BehaviorSubject<message[] | null>(null);\n\n  constructor(\n      private userData: UserDataService,\n      private dialogTrans: DialogTransferService,\n      private store: AngularFirestore,\n  ) {\n    //Subscription to changes in opened Dialog\n    dialogTrans.dialog$.pipe(\n        filter(Boolean),\n        switchMap((dialog: UserDialog) => this.getMessagesData(dialog)),\n\n        filter(data => (data.payload.data()?.message.length as number) > (this.messagesData$.getValue()?.length as number)),\n        filter(dialog => dialog.type === 'modified'),\n\n        tap(data => (data.payload.id === 'test-chat')? this.onTestChat(data) : null),\n        map(data => data.payload.data()?.message),\n    ).subscribe(messages =>\n        this.messagesData$.next(messages as message[])\n    )\n  }\n\n  public onSendMessage(messageEl: HTMLTextAreaElement): void {\n    const message = messageEl.value.trim();\n    if (!message) return;\n\n    messageEl.value = '';\n    this.messageHeightCalc(messageEl);\n\n    this.sendMessageToDB(\n      this.chatData$.getValue()?.ref as DocumentReference<chat>,\n      this.createMessageForDB(messageEl, message)\n    )\n  }\n\n  public messageHeightCalc(textarea: HTMLTextAreaElement): void {\n    textarea.style.height = 'auto'; // Resetting height\n    textarea.style.height = textarea.scrollHeight - 22 + 'px'; // Setting new height based on content height\n  }\n\n  private createMessageForDB(messageEl: HTMLTextAreaElement | null, message: string, user: DocumentReference = this.userData.curUserDoc?.ref): messageDB {\n    return {\n      content: message,\n      senderId: user,\n      time: new Date().toISOString()\n    }\n  }\n\n  private getMessagesData(dialog: UserDialog): Observable<Action<DocumentSnapshot<chat>>> {\n    from(dialog.ref.get()).subscribe(chat =>\n      this.setNewUserAndMessages(dialog.otherUserName, dialog.otherUserPhoto, dialog.ref, chat.data()?.message as message[])\n    )\n    return this.store.doc<chat>(`chats/${dialog.ref.id}`).snapshotChanges()\n  }\n\n  private setNewUserAndMessages(name: string, photo: string, ref: DocumentReference<chat>, messages: message[]): void {\n    this.chatData$.next({name, photo, ref})\n    this.messagesData$.next(messages)\n  }\n\n  private randomBoolean(): boolean {\n    return Math.random() < 0.4;\n  }\n\n  private getTestMessageData(): chatData {\n    const currentChat = this.chatData$.getValue()?.ref as DocumentReference<chat>;\n    const senderId = this.store.doc<UserDB>(`users/H89Non7WmWztp02NPxMO`).ref;\n    const messages = [\n      'HelloðŸ‘‹! This message was sent automatically for you to see the application in action.',\n      \"It is sends with a 40% probability. You're lucky if you see it. Have a nice dayðŸŽ‰\"\n    ];\n    return {\n      currentChat,\n      senderId,\n      messages\n    }\n  }\n\n   private onTestChat(test: Action<DocumentSnapshot<chat>>): void{\n    const random = this.randomBoolean()\n    if(test.payload.data()?.message.slice(-1)[0].senderId.id === 'test--main' && random) {\n      const {currentChat, senderId, messages } = this.getTestMessageData();\n      //Sending Test Messages\n      setTimeout(() =>\n        this.sendMessageToDB(currentChat, this.createMessageForDB(null, messages[0], senderId))\n      ,500);\n       setTimeout(() =>\n        this.sendMessageToDB(currentChat, this.createMessageForDB(null, messages[1], senderId))\n      ,800);\n    }\n  }\n\n  private sendMessageToDB(chat: DocumentReference<chat>, message: messageDB): void {\n    updateDoc(\n      chat,\n      {message: arrayUnion(message)}\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}