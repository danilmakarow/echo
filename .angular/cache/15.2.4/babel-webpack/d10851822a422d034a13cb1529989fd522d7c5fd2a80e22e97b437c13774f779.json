{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, HostListener, ViewChild } from '@angular/core';\nimport { BehaviorSubject, filter, tap } from 'rxjs';\nlet ChatComponent = class ChatComponent {\n  handleEscapeKey(event) {\n    this.router.navigateByUrl(''); //Close component on Escape\n  }\n\n  handleEnterKey(event) {\n    this.chatData.onSendMessage(this.messageInput.nativeElement); //Send message on Enter\n  }\n\n  constructor(router, chatData) {\n    this.router = router;\n    this.chatData = chatData;\n    this.user$ = new BehaviorSubject({\n      name: 'Loading',\n      photo: ''\n    });\n    this.messages = [];\n  }\n  ngOnInit() {\n    //Subscriptions on changes in messages and dialogs\n    this.chatData.chatData$.pipe(filter(Boolean), tap(messages => this.user$.next(messages))).subscribe();\n    this.chatData.messagesData$.pipe(filter(Boolean), tap(messages => this.messages = messages)).subscribe();\n  }\n  ngAfterViewChecked() {\n    this.messageInput.nativeElement.focus();\n  }\n  onKeyDown(event) {\n    if (event.key === 'Enter' && !event.shiftKey) event.preventDefault();\n  }\n};\n__decorate([ViewChild('message', {\n  static: false\n})], ChatComponent.prototype, \"messageInput\", void 0);\n__decorate([HostListener('document:keydown.escape', ['$event'])], ChatComponent.prototype, \"handleEscapeKey\", null);\n__decorate([HostListener('document:keydown.enter', ['$event'])], ChatComponent.prototype, \"handleEnterKey\", null);\nChatComponent = __decorate([Component({\n  selector: 'app-chat',\n  templateUrl: './chat.component.html',\n  styleUrls: ['./chat.component.scss']\n})], ChatComponent);\nexport { ChatComponent };","map":{"version":3,"mappings":";AAAA,SAGEA,SAAS,EAETC,YAAY,EAGZC,SAAS,QACJ,eAAe;AAGtB,SAAQC,eAAe,EAAEC,MAAM,EAAEC,GAAG,QAAO,MAAM;AAS1C,IAAMC,aAAa,GAAnB,MAAMA,aAAa;EAIhBC,eAAe,CAACC,KAAoB;IAC1C,IAAI,CAACC,MAAM,CAACC,aAAa,CAAC,EAAE,CAAC,EAAC;EAChC;;EAGQC,cAAc,CAACH,KAAoB;IACzC,IAAI,CAACI,QAAQ,CAACC,aAAa,CAAC,IAAI,CAACC,YAAY,CAACC,aAAa,CAAC;EAC9D;;EAQAC,YACYP,MAAc,EACfG,QAAyB;IADxB,WAAM,GAANH,MAAM;IACP,aAAQ,GAARG,QAAQ;IARZ,UAAK,GAAG,IAAIT,eAAe,CAAO;MACvCc,IAAI,EAAE,SAAS;MACfC,KAAK,EAAE;KACR,CAAC;IACK,aAAQ,GAAc,EAAE;EAK5B;EAEHC,QAAQ;IACN;IACA,IAAI,CAACP,QAAQ,CAACQ,SAAS,CAACC,IAAI,CAC1BjB,MAAM,CAACkB,OAAO,CAAC,EACfjB,GAAG,CAACkB,QAAQ,IAAI,IAAI,CAACC,KAAK,CAACC,IAAI,CAACF,QAAQ,CAAC,CAAC,CAC3C,CAACG,SAAS,EAAE;IAEb,IAAI,CAACd,QAAQ,CAACe,aAAa,CAACN,IAAI,CAC9BjB,MAAM,CAACkB,OAAO,CAAC,EACfjB,GAAG,CAACkB,QAAQ,IAAI,IAAI,CAACA,QAAQ,GAAGA,QAAQ,CAAC,CAC1C,CAACG,SAAS,EAAE;EACf;EAEAE,kBAAkB;IAChB,IAAI,CAACd,YAAY,CAACC,aAAa,CAACc,KAAK,EAAE;EACzC;EAEOC,SAAS,CAACtB,KAAoB;IACnC,IAAIA,KAAK,CAACuB,GAAG,KAAK,OAAO,IAAI,CAACvB,KAAK,CAACwB,QAAQ,EAC1CxB,KAAK,CAACyB,cAAc,EAAE;EAC1B;CACD;AA5CwCC,YAAtChC,SAAS,CAAC,SAAS,EAAE;EAACiC,MAAM,EAAE;AAAK,CAAC,CAAC,mDAAmC;AAGzED,YADCjC,YAAY,CAAC,yBAAyB,EAAE,CAAC,QAAQ,CAAC,CAAC,oDAGnD;AAGDiC,YADCjC,YAAY,CAAC,wBAAwB,EAAE,CAAC,QAAQ,CAAC,CAAC,mDAGlD;AAXUK,aAAa,eANzBN,SAAS,CAAC;EACToC,QAAQ,EAAE,UAAU;EACpBC,WAAW,EAAE,uBAAuB;EACpCC,SAAS,EAAE,CAAC,uBAAuB;CACpC,CAAC,GAEWhC,aAAa,CA6CzB;SA7CYA,aAAa","names":["Component","HostListener","ViewChild","BehaviorSubject","filter","tap","ChatComponent","handleEscapeKey","event","router","navigateByUrl","handleEnterKey","chatData","onSendMessage","messageInput","nativeElement","constructor","name","photo","ngOnInit","chatData$","pipe","Boolean","messages","user$","next","subscribe","messagesData$","ngAfterViewChecked","focus","onKeyDown","key","shiftKey","preventDefault","__decorate","static","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Courses\\ANGULAR\\echo\\src\\app\\feature\\messenger\\messenger\\chat\\chat.component.ts"],"sourcesContent":["import {\n  AfterViewChecked,\n  AfterViewInit,\n  Component,\n  ElementRef,\n  HostListener,\n  OnDestroy,\n  OnInit,\n  ViewChild\n} from '@angular/core';\nimport {chat, message, User} from \"../../../user-data.service\";\nimport {Router} from \"@angular/router\";\nimport {BehaviorSubject, filter, tap} from 'rxjs';\nimport {ChatDataService} from \"./chat-data.service\";\n\n@Component({\n  selector: 'app-chat',\n  templateUrl: './chat.component.html',\n  styleUrls: ['./chat.component.scss']\n})\n\nexport class ChatComponent implements OnInit, AfterViewChecked {\n  @ViewChild('message', {static: false}) private messageInput!: ElementRef;\n\n  @HostListener('document:keydown.escape', ['$event'])\n  private handleEscapeKey(event: KeyboardEvent): void {\n    this.router.navigateByUrl('') //Close component on Escape\n  };\n\n  @HostListener('document:keydown.enter', ['$event'])\n  private handleEnterKey(event: KeyboardEvent): void {\n    this.chatData.onSendMessage(this.messageInput.nativeElement)//Send message on Enter\n  }\n\n  public user$ = new BehaviorSubject<User>({\n    name: 'Loading',\n    photo: ''\n  });\n  public messages: message[] = [];\n\n  constructor(\n      private router: Router,\n      public chatData: ChatDataService\n  ) {}\n\n  ngOnInit() {\n    //Subscriptions on changes in messages and dialogs\n    this.chatData.chatData$.pipe(\n      filter(Boolean),\n      tap(messages => this.user$.next(messages))\n    ).subscribe();\n\n    this.chatData.messagesData$.pipe(\n      filter(Boolean),\n      tap(messages => this.messages = messages)\n    ).subscribe();\n  }\n\n  ngAfterViewChecked() {\n    this.messageInput.nativeElement.focus();\n  }\n\n  public onKeyDown(event: KeyboardEvent): void {\n    if (event.key === 'Enter' && !event.shiftKey)\n      event.preventDefault();\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}