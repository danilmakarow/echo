{"ast":null,"code":"import { BehaviorSubject, filter, from, map, switchMap, tap } from \"rxjs\";\nimport { arrayUnion, updateDoc } from \"@angular/fire/firestore\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../../user-data.service\";\nimport * as i2 from \"../../../dialog-transfer.service\";\nimport * as i3 from \"@angular/fire/compat/firestore\";\nexport class ChatDataService {\n  constructor(userData, dialogTrans, store) {\n    this.userData = userData;\n    this.dialogTrans = dialogTrans;\n    this.store = store;\n    this.chatData$ = new BehaviorSubject(null);\n    this.messagesData$ = new BehaviorSubject(null);\n    //Subscription to changes in opened Dialog\n    dialogTrans.dialog$.pipe(filter(Boolean), switchMap(dialog => this.getMessagesData(dialog)), filter(data => data.payload.data()?.message.length > this.messagesData$.getValue()?.length), filter(dialog => dialog.type === 'modified'), tap(data => data.payload.id === 'test-chat' ? this.onTestChat(data) : null), map(data => data.payload.data()?.message)).subscribe(messages => this.messagesData$.next(messages));\n  }\n  onSendMessage(messageEl) {\n    const message = messageEl.value.trim();\n    if (!message) return;\n    messageEl.value = '';\n    this.messageHeightCalc(messageEl);\n    this.sendMessageToDB(this.chatData$.getValue()?.ref, this.createMessageForDB(messageEl, message));\n  }\n  messageHeightCalc(textarea) {\n    textarea.style.height = 'auto'; // Resetting height\n    textarea.style.height = textarea.scrollHeight - 22 + 'px'; // Setting new height based on content height\n  }\n\n  createMessageForDB(messageEl, message, user = this.userData.curUserDoc?.ref) {\n    return {\n      content: message,\n      senderId: user,\n      time: new Date().toISOString()\n    };\n  }\n  getMessagesData(dialog) {\n    from(dialog.ref.get()).subscribe(chat => this.setNewUserAndMessages(dialog.otherUserName, dialog.otherUserPhoto, dialog.ref, chat.data()?.message));\n    return this.store.doc(`chats/${dialog.ref.id}`).snapshotChanges();\n  }\n  setNewUserAndMessages(name, photo, ref, messages) {\n    this.chatData$.next({\n      name,\n      photo,\n      ref\n    });\n    this.messagesData$.next(messages);\n  }\n  randomBoolean() {\n    return Math.random() < 0.4;\n  }\n  getTestMessageData() {\n    const currentChat = this.chatData$.getValue()?.ref;\n    const senderId = this.store.doc(`users/H89Non7WmWztp02NPxMO`).ref;\n    const messages = ['HelloðŸ‘‹! This message was sent automatically for you to see the application in action.', \"It is sends with a 40% probability. You're lucky if you see it. Have a nice dayðŸŽ‰\"];\n    return {\n      currentChat,\n      senderId,\n      messages\n    };\n  }\n  onTestChat(test) {\n    const random = this.randomBoolean();\n    if (test.payload.data()?.message.slice(-1)[0].senderId.id === 'test--main' && random) {\n      const {\n        currentChat,\n        senderId,\n        messages\n      } = this.getTestMessageData();\n      //Sending Test Messages\n      setTimeout(() => this.sendMessageToDB(currentChat, this.createMessageForDB(null, messages[0], senderId)), 500);\n      setTimeout(() => this.sendMessageToDB(currentChat, this.createMessageForDB(null, messages[1], senderId)), 800);\n    }\n  }\n  sendMessageToDB(chat, message) {\n    updateDoc(chat, {\n      message: arrayUnion(message)\n    });\n  }\n}\nChatDataService.Éµfac = function ChatDataService_Factory(t) {\n  return new (t || ChatDataService)(i0.ÉµÉµinject(i1.UserDataService), i0.ÉµÉµinject(i2.DialogTransferService), i0.ÉµÉµinject(i3.AngularFirestore));\n};\nChatDataService.Éµprov = /*@__PURE__*/i0.ÉµÉµdefineInjectable({\n  token: ChatDataService,\n  factory: ChatDataService.Éµfac,\n  providedIn: 'root'\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}